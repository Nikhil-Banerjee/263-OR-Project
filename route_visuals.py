import numpy as np
import folium
import matplotlib as plt
import openrouteservice as ors
from numpy.core.numeric import binary_repr
import pandas as pd
from pulp import *
from routeFunctions import *
from routeFuncsNikhil import *
from LP_Formulation import *
from groupingFunctions import *
from matplotlib.colors import rgb2hex
from matplotlib import cm
from matplotlib.colors import ListedColormap, LinearSegmentedColormap
import seaborn as sns


def find_coords(routes, locations):
    ''' Returns coords of input store matrix.
        Inputs:
        ------
        routes : 2D list
                    2D list containing routes.     

        locations : pandas data frame
                    pandas data frame containing location data of stores  
        Returns:
        --------
        routes : 2D list
                    2D list containing coords of routes (Long, Lat).
    '''
    for i in range(0, len(routes)):
        route = routes[i]
        for j in range(0, len(route)):
            route[j] = locations[locations['Store'].str.contains(route[j])][['Long','Lat']].to_numpy().tolist()
            ##temp = route[j]
            ##route[j] = temp
        routes[i] = route

    return routes

def visualise_weekday(locations, week_routes, m):
    ''' Creates visualisation of supply routes.
        Inputs:
        ------
        week_routes : 2D list
                    2D list containing routes.     

        locations : pandas data frame
                    pandas data frame containing location data of stores  
        
        m : map object


    '''
    locations = locations.drop(["Type", "Location"], axis = 1)
    week_routes_coords = find_coords(week_routes, locations)
    client = ors.Client(key = ORSkey)
    
    #creating color array
    viridis = cm.get_cmap('inferno', len(week_routes))
    colors = []
    for i in range(viridis.N):
        rgba = viridis(i)
        # rgb2hex accepts rgb or rgba
        colors.append(rgb2hex(rgba)) 
    for i in range(0, len(week_routes_coords)):
        
        route = client.directions(
        coordinates = [item for elem in week_routes_coords[i] for item in elem],
        format = 'geojson',
        validate = False 
        )
        folium.PolyLine(locations = [list(reversed(coord))
                                for coord in 
                                route['features'][0]['geometry']['coordinates']], color = colors[i]).add_to(m)

    m.save('weekdayRoutes.html')

def visualise_saturday(locations, sat_routes, m):
    ''' Creates visualisation of supply routes.
        Inputs:
        ------
        sat_routes : 2D list
                    2D list containing routes.     

        locations : pandas data frame
                    pandas data frame containing location data of stores  
        
        m : map object


    ''' 
    locations = locations.drop(["Type", "Location"], axis = 1)
    sat_routes_coords = find_coords(sat_routes, locations)
    client = ors.Client(key = ORSkey)
    #creating color array
    viridis = cm.get_cmap('inferno', len(sat_routes))

    colors = []
    for i in range(viridis.N):
        rgba = viridis(i)
        # rgb2hex accepts rgb or rgba
        colors.append(rgb2hex(rgba)) 
    for i in range(0, len(sat_routes_coords)):
        
        route = client.directions(
        coordinates = [item for elem in sat_routes_coords[i] for item in elem],
        format = 'geojson',
        validate = False  
        )
        folium.PolyLine(locations = [list(reversed(coord))
                                for coord in 
                                route['features'][0]['geometry']['coordinates']], color = colors[i]).add_to(m)

    m.save('saturdayRoutes.html')

if __name__ == "__main__":

    ORSkey = '5b3ce3597851110001cf6248d7b8cfb9dc674da68ceee4b1c3212e26'

    locations = pd.read_csv('WoolworthsLocations.csv')

    coords = locations[['Long','Lat']].to_numpy().tolist()

    #creating map and plotting stores/distribution center
    m = folium.Map(location = list(reversed(coords[2])), zoom_start = 10.25)
    
    for i in range(0,len(coords)):
        if locations.Type[i] == "Countdown":
            iconCol =  "green"
        elif locations.Type[i] == "FreshChoice":
            iconCol = "blue"
        elif locations.Type[i] == "SuperValue":
            iconCol = "red"
        elif locations.Type[i] == "Countdown Metro":
            iconCol = "orange"
        elif locations.Type[i] == "Distribution Centre":
            iconCol = "black"
        folium.Marker(list(reversed(coords[i])),popup = locations.Store[i], icon = folium.
        Icon(color = iconCol)).add_to(m)

    #opening optimum routes generated by LP
    with open('UsedWkDayRoutes.pkl', 'rb') as f:
        wkDayR = pickle.load(f)
    with open('UsedSatRoutes.pkl', 'rb') as f:
        SatR = pickle.load(f)
         
    #adding weekday and saturday routes to map (two seperate html files are generated for weekday and sat)
    visualise_saturday(locations, SatR, m)
    visualise_weekday(locations, wkDayR, m)
    
    






